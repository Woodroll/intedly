{"version":3,"sources":["components/EventButton.js","components/calendar.js","components/eventlist.js","App.js","reportWebVitals.js","index.js"],"names":["EventButton","props","setCurrentEvent","calEvent","event","summary","description","start","end","dateFormatPopover","console","log","popover","Popover","id","Title","as","Content","format","Date","dateTime","OverlayTrigger","trigger","placement","overlay","Button","onClick","variant","Calendar","currentMonth","setCurrentMonth","selectedDate","setSelectedDate","list","inputEl","useRef","eventList","forEach","edate","push","onDateClick","day","nextMonth","addMonths","prevMonth","subMonths","className","days","startDate","startOfWeek","i","addDays","renderDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","isSameDay","map","element","ref","renderCells","EventsList","events","currentEvent","item","App","useState","calEvents","Container","fluid","Row","Col","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcb08865.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport {format} from 'date-fns';\r\n\r\nconst EventButton = (props) => {\r\n    const {setCurrentEvent} = props\r\n    \r\n    const calEvent = props.event;\r\n    const {summary, description, start, end} = calEvent\r\n    const dateFormatPopover = \"cccc, MMMM dd, yyyy\";\r\n    console.log(typeof props.event)\r\n    \r\n    const popover = (\r\n        <Popover id=\"popover-basic\">\r\n          <Popover.Title as=\"h3\">{summary}</Popover.Title>\r\n          <Popover.Content>\r\n            {`Start: ${format(new Date(start.dateTime), dateFormatPopover)} /\\n\r\n            End: ${format (new Date(end.dateTime), dateFormatPopover)} /\\n\r\n            Description: ${description}`}\r\n          </Popover.Content>\r\n        </Popover>\r\n      );\r\n    \r\n    \r\n    return (\r\n            <OverlayTrigger trigger=\"focus\" placement=\"right\" overlay={popover}>\r\n            <Button onClick={() => setCurrentEvent(calEvent)} variant=\"success\">üè†</Button>\r\n            </OverlayTrigger>\r\n    )\r\n}\r\n\r\nexport default EventButton;","\r\nimport React, {useRef} from \"react\";\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Button from 'react-bootstrap/Button';\r\nimport dateFns, {format, addMonths, subMonths, startOfWeek, addDays,\r\n    startOfMonth, endOfMonth, endOfWeek, isSameMonth, isSameDay, parse } from \"date-fns\";\r\nimport EventButton from \"./EventButton\";\r\n\r\nconst Calendar = (props) => {\r\n    // state = {\r\n    //     currentMonth: new Date(),\r\n    //     selectedDate: new Date()\r\n    // };\r\n\r\n    const { currentMonth, setCurrentMonth, selectedDate, setSelectedDate, list } = props;\r\n    const inputEl = useRef(null);\r\n    \r\n    let eventList = {}\r\n    list.forEach(event =>{\r\n      const edate = format (new Date(event.start.dateTime), \"d\");\r\n      eventList[edate]? eventList[edate].push(event): eventList[edate] = [event];\r\n    });\r\n\r\n    console.log(eventList);\r\n\r\n    const renderHeader = () => { \r\n        const dateFormat = \"MMMM yyyy\";\r\n        return (\r\n        <div className=\"header row flex-middle\">\r\n            <div className=\"col col-start\">\r\n            <div className=\"icon\" onClick={prevMonth}>\r\n                chevron_left\r\n            </div>\r\n            </div>\r\n            <div className=\"col col-center\">\r\n            <span>\r\n                {format(currentMonth, dateFormat)}\r\n            </span>\r\n            </div>\r\n            <div className=\"col col-end\" onClick={nextMonth}>\r\n            <div className=\"icon\">chevron_right</div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n    const renderDays = () => {\r\n        const dateFormat = \"E\";\r\n        const days = [];\r\n        let startDate = startOfWeek(currentMonth);\r\n        for (let i = 0; i < 7; i++) {\r\n          days.push(\r\n            <div className=\"col col-center\" key={i}>\r\n              {format(addDays(startDate, i), dateFormat)}\r\n            </div>\r\n          );\r\n        }\r\n        return <div className=\"days row\">{days}</div>;\r\n      }\r\n    \r\n    const renderCells = () => {\r\n        const monthStart = startOfMonth(currentMonth);\r\n        const monthEnd = endOfMonth(monthStart);\r\n        const startDate = startOfWeek(monthStart);\r\n        const endDate = endOfWeek(monthEnd);\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n    \r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n    \r\n        while (day <= endDate) {\r\n          for (let i = 0; i < 7; i++) {\r\n            formattedDate = format(day, dateFormat);\r\n            const cloneDay = day;\r\n            days.push(\r\n              <div\r\n                className={`col cell ${\r\n                  !isSameMonth(day, monthStart)\r\n                    ? \"disabled\"\r\n                    : isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n                }`}\r\n                key={day}\r\n                onClick={() => onDateClick(cloneDay)}\r\n              >\r\n                <span className=\"number\">{formattedDate}</span>\r\n                <span className='Event'>{isSameMonth(day, monthStart) && eventList[formattedDate]?\r\n                eventList[formattedDate].map(element => <EventButton event={element} setCurrentEvent = {props.setCurrentEvent}/>)\r\n                :\"\"}</span>\r\n                {/* <span className=\"bg\">{formattedDate}</span> */}\r\n\r\n              </div>\r\n            );\r\n            day = addDays(day, 1);\r\n          }\r\n          rows.push(\r\n            <div className=\"row\" key={day}>\r\n              {days}\r\n            </div>\r\n          );\r\n          days = [];\r\n        }\r\n        return <div ref={inputEl} className=\"body\">{rows}</div>;\r\n      }\r\n    \r\n    const onDateClick = day => {\r\n        setSelectedDate(day);\r\n      };\r\n\r\n\r\n\r\n    const nextMonth = () => {\r\n        setCurrentMonth(addMonths(currentMonth, 1));\r\n    };\r\n  \r\n    const prevMonth = () => {\r\n        setCurrentMonth(subMonths(currentMonth, 1));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {renderHeader()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n            {console.log(inputEl)}\r\n        </>\r\n        );\r\n}\r\n\r\n\r\nexport default Calendar;","import React, {useState} from 'react';\r\nimport {format} from \"date-fns\";\r\nimport EventButton from './EventButton';\r\n\r\nvar list = [\r\n    {'summary': 'Showing',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-03-28T09:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2021-03-28T10:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n\r\n    {'summary': 'Showing',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-03-28T12:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2015-05-28T14:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n\r\n    {\r\n    'summary': 'Google I/O 2015',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-03-29T09:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2021-05-29T17:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n];\r\n\r\nconst EventsList = (props) => {\r\n    const { events, currentMonth, setCurrentMonth, selectedDate, \r\n      setCurrentEvent, currentEvent, setSelectedDate } = props;\r\n    const dateFormat = \"cccc, MMMM dd, yyyy\";\r\n    return (\r\n      <>\r\n      <h2>{format(selectedDate, dateFormat)}</h2>\r\n      <ul className=\"calendar-dates\">\r\n        {events.map( item =>\r\n            <li className=\"event\">\r\n          <h2>{item.summary}</h2>\r\n        </li>\r\n        )}\r\n      </ul>\r\n      {currentEvent? (\r\n      <div>  \r\n      <h2>Current Event:</h2>\r\n      <p>{currentEvent?.description}</p>\r\n      </div>\r\n      ):<p>Click an event.</p>}\r\n      </>\r\n    )\r\n}\r\n\r\nexport default EventsList;\r\n","import { useState } from 'react';\nimport './App.css';\nimport './Calendar.css';\nimport Calendar from \"./components/calendar\";\nimport EventsList from './components/eventlist';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction App() {\n  \n  var list = [\n    {'summary': 'Showing',\n    'location': '800 Howard St., San Francisco, CA 94103',\n    'description': 'A chance to hear more about Google\\'s developer products.',\n    'start': {\n      'dateTime': '2021-03-28T09:00:00-07:00',\n      'timeZone': 'America/Los_Angeles',\n    },\n    'end': {\n      'dateTime': '2021-03-28T10:00:00-07:00',\n      'timeZone': 'America/Los_Angeles',\n    },\n    'attendees': [\n      {'email': 'lpage@example.com'},\n      {'email': 'sbrin@example.com'},\n    ],\n    },\n\n    {'summary': 'Showing',\n    'location': '800 Howard St., San Francisco, CA 94103',\n    'description': 'A chance to hear more about Google\\'s developer products.',\n    'start': {\n      'dateTime': '2021-03-28T12:00:00-07:00',\n      'timeZone': 'America/Los_Angeles',\n    },\n    'end': {\n      'dateTime': '2015-05-28T14:00:00-07:00',\n      'timeZone': 'America/Los_Angeles',\n    },\n    'attendees': [\n      {'email': 'lpage@example.com'},\n      {'email': 'sbrin@example.com'},\n    ],\n    },\n\n    {\n    'summary': 'Google I/O 2015',\n    'location': '800 Howard St., San Francisco, CA 94103',\n    'description': 'A chance to hear more about Google\\'s developer products.',\n    'start': {\n      'dateTime': '2021-03-29T09:00:00-07:00',\n      'timeZone': 'America/Los_Angeles',\n    },\n    'end': {\n      'dateTime': '2021-05-29T17:00:00-07:00',\n      'timeZone': 'America/Los_Angeles',\n    },\n    'attendees': [\n      {'email': 'lpage@example.com'},\n      {'email': 'sbrin@example.com'},\n    ],\n    },\n  ];\n\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [calEvents, setCalEvents] = useState(list);\n  const [currentEvent, setCurrentEvent] = useState({});\n\n  return (\n      <Container fluid>\n      <Row className=\"App-header\">\n        <Col><h1>Intedly</h1></Col>\n      </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col md={4} ><EventsList\n            currentMonth = {currentMonth}\n            setCurrentMonth = {setCurrentMonth}\n            selectedDate = {selectedDate}\n            setSelectedDate = {setSelectedDate}\n            events = {calEvents}\n            setCurrentEvent = {setCurrentEvent}\n            currentEvent = {currentEvent}\n            />\n          </Col>\n          <Col className=\"calendar\" md={8} ><Calendar \n            currentMonth = {currentMonth}\n            setCurrentMonth = {setCurrentMonth}\n            selectedDate = {selectedDate}\n            setSelectedDate = {setSelectedDate}\n            list = {calEvents}\n            setCurrentEvent = {setCurrentEvent}\n            currentEvent = {currentEvent}\n            />\n          </Col>\n        </Row>\n  </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}