{"version":3,"sources":["components/calendar.js","components/eventlist.js","App.js","reportWebVitals.js","index.js"],"names":["Calendar","props","currentMonth","setCurrentMonth","selectedDate","setSelectedDate","onDateClick","day","nextMonth","addMonths","prevMonth","subMonths","className","onClick","format","days","startDate","startOfWeek","i","push","addDays","renderDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","isSameDay","renderCells","list","EventsList","useState","events","map","item","summary","App","Date","Container","fluid","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65666395.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport dateFns, {format, addMonths, subMonths, startOfWeek, addDays,\r\n    startOfMonth, endOfMonth, endOfWeek, isSameMonth, isSameDay, parse } from \"date-fns\";\r\n\r\nconst Calendar = (props) => {\r\n    // state = {\r\n    //     currentMonth: new Date(),\r\n    //     selectedDate: new Date()\r\n    // };\r\n\r\n    const { currentMonth, setCurrentMonth, selectedDate, setSelectedDate } = props;\r\n\r\n    const renderHeader = () => { \r\n        const dateFormat = \"MMMM yyyy\";\r\n        return (\r\n        <div className=\"header row flex-middle\">\r\n            <div className=\"col col-start\">\r\n            <div className=\"icon\" onClick={prevMonth}>\r\n                chevron_left\r\n            </div>\r\n            </div>\r\n            <div className=\"col col-center\">\r\n            <span>\r\n                {format(currentMonth, dateFormat)}\r\n            </span>\r\n            </div>\r\n            <div className=\"col col-end\" onClick={nextMonth}>\r\n            <div className=\"icon\">chevron_right</div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n    const renderDays = () => {\r\n        const dateFormat = \"E\";\r\n        const days = [];\r\n        let startDate = startOfWeek(currentMonth);\r\n        for (let i = 0; i < 7; i++) {\r\n          days.push(\r\n            <div className=\"col col-center\" key={i}>\r\n              {format(addDays(startDate, i), dateFormat)}\r\n            </div>\r\n          );\r\n        }\r\n        return <div className=\"days row\">{days}</div>;\r\n      }\r\n    \r\n    const renderCells = () => {\r\n        const monthStart = startOfMonth(currentMonth);\r\n        const monthEnd = endOfMonth(monthStart);\r\n        const startDate = startOfWeek(monthStart);\r\n        const endDate = endOfWeek(monthEnd);\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n    \r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n    \r\n        while (day <= endDate) {\r\n          for (let i = 0; i < 7; i++) {\r\n            formattedDate = format(day, dateFormat);\r\n            const cloneDay = day;\r\n            days.push(\r\n              <div\r\n                className={`col cell ${\r\n                  !isSameMonth(day, monthStart)\r\n                    ? \"disabled\"\r\n                    : isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n                }`}\r\n                key={day}\r\n                onClick={() => onDateClick(cloneDay)}\r\n              >\r\n                <span className=\"number\">{formattedDate}</span>\r\n                <span className=\"bg\">{formattedDate}</span>\r\n              </div>\r\n            );\r\n            day = addDays(day, 1);\r\n          }\r\n          rows.push(\r\n            <div className=\"row\" key={day}>\r\n              {days}\r\n            </div>\r\n          );\r\n          days = [];\r\n        }\r\n        return <div className=\"body\">{rows}</div>;\r\n      }\r\n    \r\n    const onDateClick = day => {\r\n        setSelectedDate(day);\r\n      };\r\n\r\n\r\n\r\n    const nextMonth = () => {\r\n        setCurrentMonth(addMonths(currentMonth, 1));\r\n    };\r\n  \r\n    const prevMonth = () => {\r\n        setCurrentMonth(subMonths(currentMonth, 1));\r\n    };\r\n\r\n    return (\r\n        <div className=\"calendar\">\r\n            {renderHeader()}\r\n            {renderDays()}\r\n            {renderCells()}\r\n        </div>\r\n        );\r\n}\r\n\r\n\r\nexport default Calendar;","import React, {useState} from 'react';\r\nimport {format} from \"date-fns\";\r\n\r\nvar list = [\r\n    {'summary': 'Showing',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-03-28T09:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2021-03-28T10:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n\r\n    {'summary': 'Showing',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-03-28T12:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2015-05-28T14:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n\r\n    {\r\n    'summary': 'Google I/O 2015',\r\n    'location': '800 Howard St., San Francisco, CA 94103',\r\n    'description': 'A chance to hear more about Google\\'s developer products.',\r\n    'start': {\r\n      'dateTime': '2021-03-29T09:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'end': {\r\n      'dateTime': '2021-05-29T17:00:00-07:00',\r\n      'timeZone': 'America/Los_Angeles',\r\n    },\r\n    'attendees': [\r\n      {'email': 'lpage@example.com'},\r\n      {'email': 'sbrin@example.com'},\r\n    ],\r\n    },\r\n];\r\n\r\nconst EventsList = (props) => {\r\n    const [events, setEvents] = useState(list)\r\n    const { currentMonth, setCurrentMonth, selectedDate, setSelectedDate } = props;\r\n    const dateFormat = \"cccc, MMMM dd, yyyy\";\r\n    return (\r\n      <div>\r\n      <h2>{format(selectedDate, dateFormat)}</h2>\r\n      <ul className=\"calendar-dates\">\r\n        {events.map( item =>\r\n            <li className=\"event\">\r\n          <h2>{item.summary}</h2>\r\n        </li>\r\n        )}\r\n      </ul>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default EventsList;\r\n","import { useState } from 'react';\nimport { Row, Container, Col } from 'react-bootstrap';\nimport './App.css';\nimport './Calendar.css'\nimport Calendar from \"./components/calendar\"\nimport EventsList from './components/eventlist';\n\nfunction App() {\n  \n  const [currentMonth, setCurrentMonth] = useState(new Date())\n  const [selectedDate, setSelectedDate] = useState(new Date())\n\n  return (\n      <Container fluid>\n      <Row className=\"App-header\">\n        <Col><h1>Intedly</h1></Col>\n      </Row>\n        <Row>\n          <Col><Calendar \n            currentMonth = {currentMonth}\n            setCurrentMonth = {setCurrentMonth}\n            selectedDate = {selectedDate}\n            setSelectedDate = {setSelectedDate}\n            /></Col>\n          <Col><EventsList\n            currentMonth = {currentMonth}\n            setCurrentMonth = {setCurrentMonth}\n            selectedDate = {selectedDate}\n            setSelectedDate = {setSelectedDate}\n            /></Col>\n        </Row>\n      </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}